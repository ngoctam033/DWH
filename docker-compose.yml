---
x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:3.0.3}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-apiserver:8080/execution/'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-minio pandas requests duckdb pyarrow sqlalchemy}
    AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/config:/opt/airflow/config
    - ./airflow/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:

  postgres:
    profiles: [manual]
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    networks:
      - dwh_network

  redis:
    profiles: [manual]
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always
    networks:
      - dwh_network

  airflow-apiserver:
    profiles: [manual]
    <<: *airflow-common
    command: api-server
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - dwh_network

  airflow-scheduler:
    profiles: [manual]
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - dwh_network

  airflow-dag-processor:
    profiles: [manual]
    <<: *airflow-common
    command: dag-processor
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type DagProcessorJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - dwh_network

  airflow-worker:
    profiles: [manual]
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-apiserver:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    networks:
      - dwh_network

  airflow-triggerer:
    profiles: [manual]
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - dwh_network

  airflow-init:
    profiles: [manual]
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
          export AIRFLOW_UID=$$(id -u)
        fi

        # # Cài đặt các thư viện Python bổ sung với quyền của user airflow
        # echo
        # echo "Installing additional Python packages as airflow user..."
        # su - airflow -c "pip install minio pandas requests"
        # echo "Finished installing additional packages"

        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        echo
        echo "Creating missing opt dirs if missing:"
        echo
        mkdir -v -p /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Airflow version:"
        /entrypoint airflow version
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Running airflow config list to create default config file if missing."
        echo
        /entrypoint airflow config list >/dev/null
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Change ownership of files in /opt/airflow to ${AIRFLOW_UID}:0"
        echo
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/
        echo
        echo "Change ownership of files in shared volumes to ${AIRFLOW_UID}:0"
        echo
        chown -v -R "${AIRFLOW_UID}:0" /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}

    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    networks:
      - dwh_network

  airflow-cli:
    profiles: [manual]
    <<: *airflow-common
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow
    depends_on:
      <<: *airflow-common-depends-on
    networks:
      - dwh_network

  flower:
    profiles: [manual]
    <<: *airflow-common
    command: celery flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - dwh_network

  minio1:
    profiles: [manual]
    image: bitnami/minio:latest
    # container_name: minio1
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=admin123
      - MINIO_DISTRIBUTED_MODE_ENABLED=no

      - MINIO_SCHEME=http
      # - MINIO_DISTRIBUTED_NODES=minio1,minio2,minio3,minio4
      #- MINIO_SKIP_CLIENT=yes
    # volumes:
    #   - minio1-data:/bitnami/minio/data
    ports:
      - "9000:9000"
      - "9001:9001"  # Console UI
      
    # command: server --address ":9000" --console-address ":9001" http://minio{1...4}/bitnami/minio/data
    command: server --address ":9000" --console-address ":9001" /bitnami/minio/data

    networks:
      - dwh_network

  # minio2:
  #   image: bitnami/minio:latest
  #   # container_name: minio2
  #   environment:
  #     - MINIO_ROOT_USER=admin
  #     - MINIO_ROOT_PASSWORD=admin123
  #     - MINIO_DISTRIBUTED_MODE_ENABLED=yes

  #     - MINIO_SCHEME=http
  #     - MINIO_DISTRIBUTED_NODES=minio1,minio2,minio3,minio4
  #     #- MINIO_SKIP_CLIENT=yes
  #   # volumes:
  #   #   - minio2-data:/bitnami/minio/data
  #   command: server --address ":9000" http://minio{1...4}/bitnami/minio/data
  #   networks:
  #     - dwh_network

  # minio3:
  #   image: bitnami/minio:latest
  #   # container_name: minio3
  #   environment:
  #     - MINIO_ROOT_USER=admin
  #     - MINIO_ROOT_PASSWORD=admin123
  #     - MINIO_DISTRIBUTED_MODE_ENABLED=yes

  #     - MINIO_SCHEME=http
  #     - MINIO_DISTRIBUTED_NODES=minio1,minio2,minio3,minio4
  #     #- MINIO_SKIP_CLIENT=yes
  #   # volumes:
  #   #   - minio3-data:/bitnami/minio/data
  #   command: server --address ":9000" http://minio{1...4}/bitnami/minio/data
  #   networks:
  #     - dwh_network

  # minio4:
  #   image: bitnami/minio:latest
  #   # container_name: minio4
  #   environment:
  #     - MINIO_ROOT_USER=admin
  #     - MINIO_ROOT_PASSWORD=admin123
  #     - MINIO_DISTRIBUTED_MODE_ENABLED=yes

  #     - MINIO_SCHEME=http
  #     - MINIO_DISTRIBUTED_NODES=minio1,minio2,minio3,minio4
  #     #- MINIO_SKIP_CLIENT=yes
  #   # volumes:
  #   #   - minio4-data:/bitnami/minio/data
  #   command: server --address ":9000" http://minio{1...4}/bitnami/minio/data
  #   networks:
  #     - dwh_network

  db:
    profiles: [manual]
    image: postgres:16
    container_name: db
    environment:
      - POSTGRES_DB=final_project
      - POSTGRES_USER=final_project
      - POSTGRES_PASSWORD=final_project
    ports:
      - "5434:5432"
    volumes:
      - ./init-db:/docker-entrypoint-initdb.d
    networks:
      - dwh_network
      
  data_source:
    profiles: [manual]
    build:
      context: ./data_source
      dockerfile: Dockerfile
    container_name: data_source
    volumes:
    - ./data_source:/app 
    ports:
      - "8000:8000"
    networks:
      - dwh_network

  duckdb:
    profiles: [manual]
    build:
      context: ./duck_db
      dockerfile: Dockerfile
    container_name: duckdb
    volumes:
    - ./duck_db:/app
    # ports:
    #   - "8090:8000"
    networks:
      - dwh_network

networks:
  dwh_network:
    driver: bridge


# volumes:
#   minio1-data:
#   minio2-data:
#   minio3-data:
#   minio4-data: