"""
T·∫°o d·ªØ li·ªáu cho kho h√†ng (warehouse) v√† t·ªìn kho (inventory) cho c·ª≠a h√†ng c√¥ng ngh·ªá
tr√™n c√°c s√†n th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠
"""

import sys
import os
import random
from datetime import datetime, timedelta
import pandas as pd
from sqlalchemy import text
import numpy as np
import uuid

# Th√™m th∆∞ m·ª•c cha v√†o sys.path ƒë·ªÉ import module
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from .db_config import get_db_connection

# K·∫øt n·ªëi ƒë·∫øn database
def connect_to_db():
    """K·∫øt n·ªëi ƒë·∫øn database v√† tr·∫£ v·ªÅ connection"""
    try:
        engine = get_db_connection()
        conn = engine.connect()
        print("‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn database")
        return conn
    except Exception as e:
        print(f"‚ùå L·ªói khi k·∫øt n·ªëi ƒë·∫øn database: {e}")
        sys.exit(1)

# L·∫•y danh s√°ch ƒë·ªãa ƒëi·ªÉm (geo_location) t·ª´ database
def get_geo_locations(conn):
    """L·∫•y danh s√°ch c√°c ƒë·ªãa ƒëi·ªÉm t·ª´ b·∫£ng geo_location"""
    try:
        query = text("""
            SELECT ward_code, province_name, district_name, ward_name 
            FROM geo_location 
            WHERE is_active = TRUE
        """)
        result = conn.execute(query).fetchall()
        if not result:
            print("‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ƒë·ªãa ƒëi·ªÉm")
            return []
        print(f"‚úÖ ƒê√£ l·∫•y {len(result)} ƒë·ªãa ƒëi·ªÉm t·ª´ database")
        return result
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y ƒë·ªãa ƒëi·ªÉm: {e}")
        return []

# L·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´ database
def get_products(conn):
    """L·∫•y danh s√°ch c√°c s·∫£n ph·∫©m t·ª´ b·∫£ng product"""
    try:
        query = text("""
            SELECT p.id, p.name, p.price, p.product_sku, 
                   b.name as brand_name, 
                   sc.name as subcategory_name,
                   c.name as category_name
            FROM product p
            JOIN brand b ON p.brand_id = b.id
            JOIN sub_category sc ON p.sub_category_id = sc.id
            JOIN category c ON sc.category_id = c.id
            WHERE p.is_active = TRUE
        """)
        result = conn.execute(query).fetchall()
        if not result:
            print("‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o trong database")
            sys.exit(1)
        print(f"‚úÖ ƒê√£ l·∫•y {len(result)} s·∫£n ph·∫©m t·ª´ database")
        return result
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y danh s√°ch s·∫£n ph·∫©m: {e}")
        sys.exit(1)

# L·∫•y th√¥ng tin kho h√†ng (warehouse) t·ª´ database
def get_warehouses(conn):
    """L·∫•y d·ªØ li·ªáu c√°c kho h√†ng t·ª´ database"""
    try:
        # Truy v·∫•n danh s√°ch c√°c kho h√†ng hi·ªán c√≥
        query = text("""
            SELECT id, name, capacity_sqm 
            FROM warehouse
            WHERE is_active = TRUE
        """)
        
        warehouses = conn.execute(query).fetchall()
        
        if not warehouses:
            print("‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu kho h√†ng trong database")
            return []
        
        print(f"‚úÖ ƒê√£ l·∫•y {len(warehouses)} kho h√†ng t·ª´ database")
        
        # In th√¥ng tin c√°c kho h√†ng
        for warehouse in warehouses:
            warehouse_id = warehouse[0]
            name = warehouse[1]
            capacity = warehouse[2]
            print(f"üì¶ Kho: {name} | ID: {warehouse_id} | Di·ªán t√≠ch: {capacity}m¬≤")
        
        return warehouses
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu kho h√†ng: {e}")
        return []

# T·∫°o th√¥ng tin t·ªìn kho (inventory) cho c√°c s·∫£n ph·∫©m
def create_inventory(conn, warehouses, products):
    """T·∫°o d·ªØ li·ªáu t·ªìn kho cho c√°c s·∫£n ph·∫©m theo t·ª´ng kho h√†ng"""
    try:
        inventory_data = []
        product_distribution = {}
        
        # Ph√¢n lo·∫°i s·∫£n ph·∫©m d·ª±a tr√™n danh m·ª•c ƒë·ªÉ quy·∫øt ƒë·ªãnh ph√¢n b·ªï v√†o kho n√†o
        for product in products:
            product_id = product[0]
            category = product[6].lower() if product[6] else ""
            
            # Ph√¢n lo·∫°i s·∫£n ph·∫©m theo danh m·ª•c
            if "laptop" in category or "m√°y t√≠nh" in category:
                product_type = "laptop"
            elif "ƒëi·ªán tho·∫°i" in category or "mobile" in category:
                product_type = "phone"
            elif "tablet" in category or "m√°y t√≠nh b·∫£ng" in category:
                product_type = "tablet"
            elif "ph·ª• ki·ªán" in category or "accessory" in category:
                product_type = "accessory"
            else:
                product_type = "other"
                
            if product_type not in product_distribution:
                product_distribution[product_type] = []
            product_distribution[product_type].append(product_id)
        
        # Duy·ªát qua c√°c kho h√†ng ƒë·ªÉ t·∫°o d·ªØ li·ªáu t·ªìn kho
        for warehouse in warehouses:
            warehouse_id = warehouse[0]
            warehouse_name = warehouse[1]
            warehouse_capacity = warehouse[2]
            
            # Quy·∫øt ƒë·ªãnh lo·∫°i s·∫£n ph·∫©m ph√¢n b·ªï nhi·ªÅu v√†o kho n√†o d·ª±a tr√™n t√™n kho v√† v√πng mi·ªÅn
            warehouse_name_lower = warehouse_name.lower()
            
            # H·ªá s·ªë cho bi·∫øt kho n√†o s·∫Ω ch·ª©a nhi·ªÅu lo·∫°i s·∫£n ph·∫©m n√†o
            weights = {
                'laptop': 1.0,
                'phone': 1.0,
                'tablet': 1.0,
                'accessory': 1.0,
                'other': 1.0
            }
            
            # ƒêi·ªÅu ch·ªânh h·ªá s·ªë d·ª±a tr√™n t√™n kho v√† v√πng mi·ªÅn
            if "h√† n·ªôi" in warehouse_name_lower:
                weights['laptop'] = 1.5
                weights['phone'] = 1.2
            elif "h·ªì ch√≠ minh" in warehouse_name_lower:
                weights['phone'] = 1.5
                weights['accessory'] = 1.2
            elif "ƒë√† n·∫µng" in warehouse_name_lower:
                weights['tablet'] = 1.5
                weights['other'] = 1.2
                
            # ƒêi·ªÅu ch·ªânh d·ª±a tr√™n k√≠ch th∆∞·ªõc kho
            if float(warehouse_capacity) > 1000:
                for key in weights.keys():
                    weights[key] *= 1.5
            
            # S·ªë l∆∞·ª£ng c√°c s·∫£n ph·∫©m s·∫Ω ƒë∆∞·ª£c ƒë·∫∑t trong kho n√†y
            product_count = int(min(len(products) * 0.8, float(warehouse_capacity) / 5))
            
            # Ch·ªçn s·∫£n ph·∫©m cho kho n√†y
            warehouse_products = []
            for product_type, product_ids in product_distribution.items():
                # S·ªë l∆∞·ª£ng s·∫£n ph·∫©m c·ªßa lo·∫°i n√†y s·∫Ω ƒë∆∞·ª£c ƒë·∫∑t trong kho
                type_count = int(product_count * weights[product_type] / sum(weights.values()))
                # Ch·ªçn ng·∫´u nhi√™n s·∫£n ph·∫©m t·ª´ lo·∫°i n√†y
                selected = random.sample(product_ids, min(type_count, len(product_ids)))
                warehouse_products.extend(selected)
            
            # ƒê·∫£m b·∫£o kh√¥ng v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng mong mu·ªën
            if len(warehouse_products) > product_count:
                warehouse_products = random.sample(warehouse_products, product_count)
            
            # T·∫°o d·ªØ li·ªáu t·ªìn kho cho m·ªói s·∫£n ph·∫©m
            for product_id in warehouse_products:
                # T√¨m th√¥ng tin s·∫£n ph·∫©m
                product_info = next((p for p in products if p[0] == product_id), None)
                if not product_info:
                    continue
                
                product_name = product_info[1]
                product_price = float(product_info[2])  # Convert Decimal to float
                
                # T√≠nh gi√° v·ªën (80-95% gi√° b√°n)
                unit_cost = round(product_price * random.uniform(0.80, 0.95), 2)
                
                # X√°c ƒë·ªãnh s·ªë l∆∞·ª£ng t·ªìn kho d·ª±a tr√™n lo·∫°i s·∫£n ph·∫©m v√† gi√° tr·ªã
                base_quantity = 0
                if "laptop" in product_name.lower() or product_price > 15000000:
                    # S·∫£n ph·∫©m gi√° tr·ªã cao, s·ªë l∆∞·ª£ng √≠t
                    base_quantity = random.randint(5, 20)
                elif "ƒëi·ªán tho·∫°i" in product_name.lower() or product_price > 5000000:
                    # S·∫£n ph·∫©m gi√° tr·ªã trung b√¨nh
                    base_quantity = random.randint(10, 50)
                else:
                    # Ph·ª• ki·ªán ho·∫∑c s·∫£n ph·∫©m gi√° tr·ªã th·∫•p
                    base_quantity = random.randint(20, 100)
                
                # ƒêi·ªÅu ch·ªânh d·ª±a tr√™n dung l∆∞·ª£ng kho
                quantity = int(base_quantity * (float(warehouse_capacity) / 1000))
                
                # Thi·∫øt l·∫≠p m·ª©c t·ªìn kho an to√†n v√† m·ª©c ƒë·∫∑t h√†ng l·∫°i
                safety_stock = int(quantity * 0.2)
                reorder_level = int(quantity * 0.3)
                
                # Ng√†y ki·ªÉm k√™ g·∫ßn nh·∫•t
                last_counted_at = datetime.now() - timedelta(days=random.randint(1, 30))
                
                # Th·ªùi gian t·∫°o v√† c·∫≠p nh·∫≠t
                created_at = datetime.now() - timedelta(days=random.randint(90, 365))
                updated_at = created_at + timedelta(days=random.randint(1, 30))
                
                inventory_data.append({
                    'product_id': product_id,
                    'warehouse_id': warehouse_id,
                    'quantity': quantity,
                    'safety_stock': safety_stock,
                    'reorder_level': reorder_level,
                    'last_counted_at': last_counted_at,
                    'unit_cost': unit_cost,
                    'is_active': True,
                    'created_at': created_at,
                    'updated_at': updated_at
                })
                
        # In th√¥ng tin v·ªÅ s·ªë l∆∞·ª£ng b·∫£n ghi s·∫Ω ƒë∆∞·ª£c t·∫°o
        print(f"üîÑ Chu·∫©n b·ªã t·∫°o {len(inventory_data)} b·∫£n ghi t·ªìn kho")
        
        # L∆∞u d·ªØ li·ªáu v√†o database
        for inventory in inventory_data:
            query = text("""
                INSERT INTO inventory 
                (product_id, warehouse_id, quantity, safety_stock, reorder_level, 
                last_counted_at, unit_cost, is_active, created_at, updated_at)
                VALUES 
                (:product_id, :warehouse_id, :quantity, :safety_stock, :reorder_level, 
                :last_counted_at, :unit_cost, :is_active, :created_at, :updated_at)
            """)
            
            conn.execute(query, inventory)
        
        conn.commit()
        print(f"‚úÖ ƒê√£ t·∫°o {len(inventory_data)} b·∫£n ghi t·ªìn kho")
        
        return True
    except Exception as e:
        conn.rollback()
        print(f"‚ùå L·ªói khi t·∫°o d·ªØ li·ªáu t·ªìn kho: {e}")
        return False

# H√†m ch√≠nh ƒë·ªÉ t·∫°o d·ªØ li·ªáu t·ªìn kho
def generate_inventory_data():
    """H√†m ch√≠nh ƒë·ªÉ t·∫°o d·ªØ li·ªáu t·ªìn kho cho c√°c kho h√†ng v√† s·∫£n ph·∫©m"""
    print("\n==== B·∫ÆT ƒê·∫¶U T·∫†O D·ªÆ LI·ªÜU T·ªíN KHO ====\n")
    
    try:
        # K·∫øt n·ªëi ƒë·∫øn database
        conn = connect_to_db()
        
        # X√≥a d·ªØ li·ªáu t·ªìn kho c≈© n·∫øu c√≥
        clear_old_data = True
        if clear_old_data:
            print("\n--- X√ìA D·ªÆ LI·ªÜU T·ªíN KHO C≈® ---")
            try:
                tables = [
                    "inventory"
                ]
                for table in tables:
                    conn.execute(text(f"TRUNCATE TABLE {table} CASCADE"))
                conn.commit()
                print("‚úÖ ƒê√£ x√≥a d·ªØ li·ªáu t·ªìn kho c≈©")
            except Exception as e:
                conn.rollback()
                print(f"‚ùå L·ªói khi x√≥a d·ªØ li·ªáu t·ªìn kho c≈©: {e}")
        
        # L·∫•y d·ªØ li·ªáu c·∫ßn thi·∫øt
        print("\n--- L·∫§Y D·ªÆ LI·ªÜU C·∫¶N THI·∫æT ---")
        geo_locations = get_geo_locations(conn)
        products = get_products(conn)
        
        if not geo_locations or not products:
            print("‚ùå Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ ti·∫øp t·ª•c")
            return
        
        # L·∫•y th√¥ng tin kho h√†ng
        print("\n--- L·∫§Y TH√îNG TIN KHO H√ÄNG ---")
        warehouses = get_warehouses(conn)
        
        if not warehouses:
            print("‚ùå Kh√¥ng t√¨m th·∫•y kho h√†ng n√†o, kh√¥ng th·ªÉ ti·∫øp t·ª•c")
            return
        
        # T·∫°o t·ªìn kho
        print("\n--- T·∫†O T·ªíN KHO ---")
        create_inventory(conn, warehouses, products)
        
        print("\n==== HO√ÄN TH√ÄNH T·∫†O D·ªÆ LI·ªÜU T·ªíN KHO ====")
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
    finally:
        # ƒê√≥ng k·∫øt n·ªëi
        if 'conn' in locals() and conn:
            conn.close()

if __name__ == "__main__":
    generate_inventory_data()
